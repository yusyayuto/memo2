#!/bin/bash
# SecurityHub 全件エクスポート（詳細14列）
# all_findings.csv専用スクリプト

set -e  # エラーで停止

echo "🔍 SecurityHub 全件エクスポート開始"
echo "=================================="

# ファイル名設定
JSON_OUTPUT="all_findings_full.json"
CSV_OUTPUT="all_findings.csv"
TEMP_FILE="temp_batch.json"

# 既存ファイルのバックアップ
if [ -f "$CSV_OUTPUT" ]; then
    mv "$CSV_OUTPUT" "${CSV_OUTPUT}.backup.$(date +%s)"
    echo "📋 既存CSVをバックアップしました"
fi

if [ -f "$JSON_OUTPUT" ]; then
    mv "$JSON_OUTPUT" "${JSON_OUTPUT}.backup.$(date +%s)"
    echo "📋 既存JSONをバックアップしました"
fi

# 初期化
echo "[]" > "$JSON_OUTPUT"
NEXT_TOKEN=""
BATCH_COUNT=0
TOTAL_FINDINGS=0

echo "📡 データ取得開始: $(date)"
echo ""

# ページネーション対応の全件取得
while true; do
    BATCH_COUNT=$((BATCH_COUNT + 1))
    echo "📦 バッチ ${BATCH_COUNT} 取得中..."
    
    # API呼び出し
    if [ -z "$NEXT_TOKEN" ]; then
        # 初回
        aws securityhub get-findings \
            --max-items 100 \
            --output json > "$TEMP_FILE"
    else
        # 2回目以降
        aws securityhub get-findings \
            --max-items 100 \
            --starting-token "$NEXT_TOKEN" \
            --output json > "$TEMP_FILE"
    fi
    
    # エラーチェック
    if [ $? -ne 0 ]; then
        echo "❌ API呼び出しエラー（バッチ ${BATCH_COUNT}）"
        echo "   取得済みデータは保持されています"
        break
    fi
    
    # 今回の取得件数
    CURRENT_COUNT=$(jq '.Findings | length' "$TEMP_FILE")
    TOTAL_FINDINGS=$((TOTAL_FINDINGS + CURRENT_COUNT))
    
    echo "   👆 ${CURRENT_COUNT}件取得 (累計: ${TOTAL_FINDINGS}件)"
    
    # データを結合
    jq -s '.[0] + .[1].Findings' "$JSON_OUTPUT" "$TEMP_FILE" > temp_combined.json
    mv temp_combined.json "$JSON_OUTPUT"
    
    # NextTokenチェック
    NEXT_TOKEN=$(jq -r '.NextToken // empty' "$TEMP_FILE")
    
    if [ -z "$NEXT_TOKEN" ]; then
        echo "✅ 全データ取得完了！"
        break
    fi
    
    echo "   🔄 次のページへ続行..."
    
    # API制限対策（1秒待機）
    sleep 1
done

# 最終統計
echo ""
echo "📊 取得完了統計:"
echo "   - 総バッチ数: ${BATCH_COUNT}"
echo "   - 総取得件数: ${TOTAL_FINDINGS}"
echo "   - JSONファイル: ${JSON_OUTPUT}"

# CSV変換
echo ""
echo "🔄 CSV変換開始..."

# CSVヘッダー（詳細14列）
cat > "$CSV_OUTPUT" << 'EOF'
Id,Title,Severity,ComplianceStatus,WorkflowStatus,CreatedAt,UpdatedAt,AwsAccountId,Region,ResourceType,ResourceId,GeneratorId,Confidence,Description
EOF

# JSON→CSV変換
echo "   📝 データ変換中..."
jq -r '.[] | [
    .Id,
    .Title,
    (.Severity.Label // ""),
    (.Compliance.Status // ""),
    (.Workflow.Status // ""),
    .CreatedAt,
    .UpdatedAt,
    .AwsAccountId,
    .Region,
    ((.Resources[0].Type // "") | tostring),
    ((.Resources[0].Id // "") | tostring),
    .GeneratorId,
    (.Confidence // ""),
    ((.Description // "") | gsub("\n"; " ") | gsub(","; ";") | gsub("\""; "\"\""))
] | @csv' "$JSON_OUTPUT" >> "$CSV_OUTPUT"

# 結果確認
CSV_LINES=$(wc -l < "$CSV_OUTPUT")
DATA_LINES=$((CSV_LINES - 1))

echo "✅ CSV変換完了！"
echo ""
echo "🎉 最終結果:"
echo "=================================="
echo "📁 出力ファイル:"
echo "   - ${CSV_OUTPUT}: ${CSV_LINES}行 (ヘッダー含む)"
echo "   - データ行数: ${DATA_LINES}件"
echo "   - JSONバックアップ: ${JSON_OUTPUT}"
echo ""

# ファイルサイズ表示
echo "📏 ファイルサイズ:"
ls -lh "$CSV_OUTPUT" "$JSON_OUTPUT" | awk '{print "   - " $9 ": " $5}'
echo ""

# サンプルデータ表示
echo "👀 CSV内容サンプル（最初の3行）:"
echo "=================================="
head -3 "$CSV_OUTPUT"
echo ""

# 統計情報
echo "📈 データ分析:"
echo "=================================="

# 重要度別集計
echo "🚨 重要度別件数:"
if [ $DATA_LINES -gt 0 ]; then
    tail -n +2 "$CSV_OUTPUT" | cut -d',' -f3 | sort | uniq -c | sort -nr | while read count level; do
        [ -n "$level" ] && echo "   ${level}: ${count}件"
    done
fi
echo ""

# ステータス別集計
echo "📋 対応状況別件数:"
if [ $DATA_LINES -gt 0 ]; then
    tail -n +2 "$CSV_OUTPUT" | cut -d',' -f5 | sort | uniq -c | sort -nr | while read count status; do
        [ -n "$status" ] && echo "   ${status}: ${count}件"
    done
fi
echo ""

# リソース種別TOP5
echo "🔧 リソース種別 TOP5:"
if [ $DATA_LINES -gt 0 ]; then
    tail -n +2 "$CSV_OUTPUT" | cut -d',' -f10 | sort | uniq -c | sort -nr | head -5 | while read count type; do
        [ -n "$type" ] && echo "   ${type}: ${count}件"
    done
fi
echo ""

# クリーンアップ
rm -f "$TEMP_FILE" temp_combined.json

echo "🎯 次のステップ:"
echo "=================================="
echo "1. CloudShell GUI で '${CSV_OUTPUT}' をダウンロード"
echo "2. Excel/Google Sheets で開いて分析"
echo "3. 必要に応じてフィルタリング・グラフ作成"
echo ""
echo "💡 ダウンロード方法:"
echo "   CloudShell画面右上の「⋮」→「Download file」→「${CSV_OUTPUT}」"
echo ""
echo "✅ 処理完了: $(date)"

# 最終確認
echo ""
echo "🔍 作成ファイル最終確認:"
ls -la "$CSV_OUTPUT" "$JSON_OUTPUT" 2>/dev/null || echo "ファイル作成エラー"
