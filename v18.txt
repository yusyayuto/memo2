'========================================
' 修正版：5ファイル大規模マージVBA
' 対応：1004エラー解決、大規模処理対応（539シート×5ファイル）
' 機能：シート名ごとに赤・黄色ファイルの内容を1つの新シートにマージ
'========================================

Sub MergeColoredSheetsFixed()
    '========================================
    ' 修正版メインマージ処理
    ' 1004エラー対策：重複シート作成防止
    ' 大規模処理対応：進捗表示、メモリ最適化
    '========================================
    
    Dim sourceFiles(1 To 5) As Workbook
    Dim newWorkbook As Workbook
    Dim uniqueSheetNames As Collection
    Dim sheetName As Variant
    Dim i As Integer
    Dim redColor As Long, yellowColor As Long
    Dim processedCount As Long, totalSheets As Long
    
    ' 色の定義
    redColor = RGB(255, 0, 0)
    yellowColor = RGB(255, 255, 0)
    
    ' 開始確認
    If MsgBox("大規模マージ処理を開始します。" & vbNewLine & _
              "5つのファイルを開いておいてください。" & vbNewLine & _
              "処理時間が長くなる可能性があります。続行しますか？", _
              vbYesNo + vbQuestion, "確認") = vbNo Then
        Exit Sub
    End If
    
    ' ファイル選択
    If Not SelectSourceFiles(sourceFiles) Then
        Exit Sub
    End If
    
    ' ユニークなシート名を収集
    Set uniqueSheetNames = New Collection
    Application.StatusBar = "シート名を収集中..."
    
    For i = 1 To 5
        Dim ws As Worksheet
        For Each ws In sourceFiles(i).Worksheets
            On Error Resume Next
            uniqueSheetNames.Add ws.Name, ws.Name  ' キーで重複を自動排除
            On Error GoTo 0
        Next ws
    Next i
    
    totalSheets = uniqueSheetNames.Count
    
    MsgBox "収集完了！" & vbNewLine & _
           "ユニークシート名: " & totalSheets & "個" & vbNewLine & _
           "処理を開始します。", vbInformation
    
    ' 新しいワークブック作成
    Set newWorkbook = Workbooks.Add
    ' デフォルトシートは削除せず、後で最初のマージシートが作成されたら削除
    
    ' 処理の最適化設定
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    
    Dim isFirstSheet As Boolean
    isFirstSheet = True
    
    ' 各シート名ごとに処理
    For Each sheetName In uniqueSheetNames
        processedCount = processedCount + 1
        
        ' 進捗表示
        Application.StatusBar = "処理中... " & processedCount & "/" & totalSheets & " (" & _
                               Format(processedCount / totalSheets, "0%") & ") : " & sheetName
        
        ' 該当シート名で赤・黄色のファイルを検索
        Dim targetFiles As Collection
        Set targetFiles = New Collection
        
        For i = 1 To 5
            Set ws = Nothing
            On Error Resume Next
            Set ws = sourceFiles(i).Worksheets(CStr(sheetName))
            On Error GoTo 0
            
            If Not ws Is Nothing Then
                If ws.Tab.Color = redColor Or ws.Tab.Color = yellowColor Then
                    targetFiles.Add Array(sourceFiles(i), ws, i)  ' ファイル番号も追加
                End If
            End If
        Next i
        
        ' 赤・黄色のファイルがある場合のみシート作成
        If targetFiles.Count > 0 Then
            Call CreateMergedSheetSafe(newWorkbook, CStr(sheetName), targetFiles, isFirstSheet)
            If isFirstSheet Then isFirstSheet = False
        End If
        
        ' 100シートごとにメモリクリア
        If processedCount Mod 100 = 0 Then
            DoEvents  ' 他の処理を許可
        End If
    Next sheetName
    
    ' 設定を元に戻す
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
    Application.StatusBar = False
    
    ' デフォルトシートの最終処理
    If newWorkbook.Worksheets.Count > 1 Then
        Application.DisplayAlerts = False
        On Error Resume Next
        ' 残っているデフォルトシートがあれば削除
        Dim ws As Worksheet
        For Each ws In newWorkbook.Worksheets
            If ws.Name = "Sheet1" Or ws.Name = "シート1" Then
                ws.Delete
                Exit For
            End If
        Next ws
        On Error GoTo 0
        Application.DisplayAlerts = True
    End If
    
    ' 完了メッセージ
    MsgBox "大規模マージが完了しました！" & vbNewLine & _
           "処理したシート名: " & totalSheets & "個" & vbNewLine & _
           "作成されたシート数: " & newWorkbook.Worksheets.Count & "個" & vbNewLine & _
           "新しいファイル名: " & newWorkbook.Name, vbInformation, "完了"
    
    newWorkbook.Activate
End Sub

'========================================
' ファイル選択サブルーチン
'========================================
Function SelectSourceFiles(ByRef sourceFiles() As Workbook) As Boolean
    Dim availableFiles() As Workbook
    Dim availableCount As Integer
    Dim i As Integer
    Dim selectedNumber As Integer
    
    ' 利用可能なファイルを収集
    availableCount = 0
    For i = 1 To Workbooks.Count
        If Workbooks(i).Name <> ThisWorkbook.Name Then
            availableCount = availableCount + 1
        End If
    Next i
    
    If availableCount < 5 Then
        MsgBox "ソースファイルが5つ見つかりません。" & vbNewLine & _
               "必要: 5個、現在: " & availableCount & "個", vbExclamation
        SelectSourceFiles = False
        Exit Function
    End If
    
    ReDim availableFiles(1 To availableCount)
    availableCount = 0
    For i = 1 To Workbooks.Count
        If Workbooks(i).Name <> ThisWorkbook.Name Then
            availableCount = availableCount + 1
            Set availableFiles(availableCount) = Workbooks(i)
        End If
    Next i
    
    ' ファイル一覧表示
    Dim fileListMsg As String
    fileListMsg = "【利用可能なファイル】" & vbNewLine
    For i = 1 To availableCount
        fileListMsg = fileListMsg & i & ". " & availableFiles(i).Name & vbNewLine
    Next i
    
    ' 順序指定
    For i = 1 To 5
        Do
            selectedNumber = Val(InputBox(fileListMsg & vbNewLine & _
                                         "位置" & i & "番目のファイル番号を入力してください" & vbNewLine & _
                                         "（1〜" & availableCount & "の数字）", _
                                         "ファイル選択 (" & i & "/5)", ""))
            
            If selectedNumber = 0 Then
                SelectSourceFiles = False
                Exit Function
            End If
            
            If selectedNumber < 1 Or selectedNumber > availableCount Then
                MsgBox "1〜" & availableCount & "の範囲で入力してください。", vbExclamation
            Else
                ' 重複チェック
                Dim isDuplicate As Boolean
                Dim j As Integer
                isDuplicate = False
                For j = 1 To i - 1
                    If Not sourceFiles(j) Is Nothing Then
                        If sourceFiles(j).Name = availableFiles(selectedNumber).Name Then
                            isDuplicate = True
                            Exit For
                        End If
                    End If
                Next j
                
                If isDuplicate Then
                    MsgBox "「" & availableFiles(selectedNumber).Name & "」は既に選択されています。", vbExclamation
                Else
                    Set sourceFiles(i) = availableFiles(selectedNumber)
                    Exit Do
                End If
            End If
        Loop
    Next i
    
    ' 最終確認
    Dim finalList As String
    finalList = "【マージ順序】" & vbNewLine
    For i = 1 To 5
        finalList = finalList & i & ". " & sourceFiles(i).Name & vbNewLine
    Next i
    
    If MsgBox(finalList & vbNewLine & "この順序でマージしますか？", vbYesNo + vbQuestion, "最終確認") = vbYes Then
        SelectSourceFiles = True
    Else
        SelectSourceFiles = False
    End If
End Function

'========================================
' 安全なシート作成サブルーチン（1004エラー対策）
'========================================
Sub CreateMergedSheetSafe(targetWorkbook As Workbook, sheetName As String, sourceData As Collection, Optional isFirstSheet As Boolean = False)
    Dim newSheet As Worksheet
    Dim safeName As String
    Dim currentCol As Long
    Dim i As Integer
    Dim sourceWs As Worksheet
    Dim sourceFile As Workbook
    Dim fileIndex As Integer
    Dim lastRow As Long, lastCol As Long
    Dim colorName As String
    
    ' 安全なシート名を生成（既存チェック）
    safeName = sheetName
    Dim nameCounter As Integer
    nameCounter = 1
    
    ' 既存シート名との重複を回避
    Do While SheetExists(targetWorkbook, safeName)
        nameCounter = nameCounter + 1
        safeName = sheetName & "_" & nameCounter
    Loop
    
    ' シート名が長すぎる場合は短縮
    If Len(safeName) > 31 Then
        safeName = Left(safeName, 31)
    End If
    
    ' 新しいシートを作成
    On Error Resume Next
    Set newSheet = targetWorkbook.Worksheets.Add
    If Err.Number <> 0 Then
        Debug.Print "シート作成エラー: " & sheetName & " - " & Err.Description
        On Error GoTo 0
        Exit Sub
    End If
    On Error GoTo 0
    
    newSheet.Name = safeName
    
    ' 最初のシート作成後、デフォルトシートを削除
    If isFirstSheet And targetWorkbook.Worksheets.Count > 1 Then
        Application.DisplayAlerts = False
        On Error Resume Next
        ' デフォルトシート（通常は"Sheet1"）を削除
        Dim defaultSheet As Worksheet
        For Each defaultSheet In targetWorkbook.Worksheets
            If defaultSheet.Name <> safeName And (defaultSheet.Name = "Sheet1" Or defaultSheet.Name = "シート1") Then
                defaultSheet.Delete
                Exit For
            End If
        Next defaultSheet
        On Error GoTo 0
        Application.DisplayAlerts = True
    End If
    
    currentCol = 1
    
    ' 各ソースファイルのデータをコピー
    For i = 1 To sourceData.Count
        Set sourceFile = sourceData(i)(0)
        Set sourceWs = sourceData(i)(1)
        fileIndex = sourceData(i)(2)
        
        ' 色の判定
        If sourceWs.Tab.Color = RGB(255, 0, 0) Then
            colorName = "赤"
        ElseIf sourceWs.Tab.Color = RGB(255, 255, 0) Then
            colorName = "黄"
        Else
            colorName = "不明"
        End If
        
        ' ヘッダー行（ファイル情報）
        With newSheet.Cells(1, currentCol)
            .Value = "ファイル" & fileIndex & " (" & colorName & ")"
            .Font.Bold = True
            .Interior.Color = sourceWs.Tab.Color
            If sourceWs.Tab.Color = RGB(255, 255, 0) Then
                .Font.Color = RGB(0, 0, 0)
            Else
                .Font.Color = RGB(255, 255, 255)
            End If
        End With
        
        ' データ範囲を取得（4行目以降）
        On Error Resume Next
        lastRow = sourceWs.UsedRange.Rows.Count + sourceWs.UsedRange.Row - 1
        lastCol = sourceWs.UsedRange.Columns.Count + sourceWs.UsedRange.Column - 1
        On Error GoTo 0
        
        If lastRow >= 4 And lastCol >= 1 Then
            ' 4行目以降のデータをコピー
            Dim sourceRange As Range
            Set sourceRange = sourceWs.Range(sourceWs.Cells(4, 1), sourceWs.Cells(lastRow, lastCol))
            
            On Error Resume Next
            sourceRange.Copy
            newSheet.Cells(2, currentCol).PasteSpecial xlPasteValues
            Application.CutCopyMode = False
            On Error GoTo 0
            
            currentCol = currentCol + sourceRange.Columns.Count + 1  ' 空列追加
        Else
            ' データがない場合
            newSheet.Cells(2, currentCol).Value = "(データなし)"
            currentCol = currentCol + 2
        End If
    Next i
    
    ' 列幅自動調整（最初の50列のみ）
    On Error Resume Next
    newSheet.Range("A:AX").EntireColumn.AutoFit  ' A〜AX列（50列）
    On Error GoTo 0
    
    newSheet.Cells(1, 1).Select
End Sub

'========================================
' シート存在チェック関数
'========================================
Function SheetExists(wb As Workbook, sheetName As String) As Boolean
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = wb.Worksheets(sheetName)
    SheetExists = (Not ws Is Nothing)
    On Error GoTo 0
End Function