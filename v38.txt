#!/bin/bash
# 分散SecurityHubファイル救済スクリプト
# findings_* ファイルを統合してCSV化

set -e

echo "🚑 SecurityHub分散ファイル救済開始"
echo "======================================"

# 出力ファイル名
MERGED_JSON="rescued_all_findings.json"
FINAL_CSV="rescued_all_findings.csv"
TEMP_DIR="temp_rescue"

# 作業ディレクトリ作成
mkdir -p "$TEMP_DIR"

# 既存ファイルのバックアップ
if [ -f "$FINAL_CSV" ]; then
    mv "$FINAL_CSV" "${FINAL_CSV}.backup.$(date +%s)"
fi

echo "📊 分散ファイル状況調査..."

# findings_*ファイルを検索
FINDINGS_FILES=($(ls findings_* 2>/dev/null || echo ""))
TOTAL_FILES=${#FINDINGS_FILES[@]}

if [ $TOTAL_FILES -eq 0 ]; then
    echo "❌ findings_*ファイルが見つかりません"
    exit 1
fi

echo "   発見ファイル数: $TOTAL_FILES"
echo "   ファイル例: ${FINDINGS_FILES[0]}"

# ファイル形式判定
echo ""
echo "🔍 ファイル形式分析..."

SAMPLE_FILE="${FINDINGS_FILES[0]}"
if jq . "$SAMPLE_FILE" > /dev/null 2>&1; then
    FILE_FORMAT="JSON"
    echo "   ✅ JSON形式を検出"
    
    # JSONファイルの場合
    SAMPLE_COUNT=$(jq '. | length' "$SAMPLE_FILE" 2>/dev/null || echo "0")
    echo "   サンプル件数: $SAMPLE_COUNT"
    
    # 配列形式かオブジェクト形式かチェック
    if jq '.Findings' "$SAMPLE_FILE" > /dev/null 2>&1; then
        JSON_TYPE="OBJECT"  # {"Findings": [...]}
        echo "   形式: APIレスポンス形式"
    else
        JSON_TYPE="ARRAY"   # [...]
        echo "   形式: 配列形式"
    fi
else
    FILE_FORMAT="TEXT"
    echo "   ⚠️  テキスト形式を検出"
    head -3 "$SAMPLE_FILE"
fi

# ファイル統合処理
echo ""
echo "🔗 ファイル統合開始..."

if [ "$FILE_FORMAT" = "JSON" ]; then
    echo "[]" > "$MERGED_JSON"
    TOTAL_FINDINGS=0
    PROCESSED_FILES=0
    
    for file in "${FINDINGS_FILES[@]}"; do
        PROCESSED_FILES=$((PROCESSED_FILES + 1))
        echo "   処理中 ($PROCESSED_FILES/$TOTAL_FILES): $file"
        
        if [ -f "$file" ] && [ -s "$file" ]; then
            if [ "$JSON_TYPE" = "OBJECT" ]; then
                # APIレスポンス形式 {"Findings": [...]}
                CURRENT_FINDINGS=$(jq '.Findings // []' "$file" 2>/dev/null || echo "[]")
            else
                # 配列形式 [...]
                CURRENT_FINDINGS=$(jq '. // []' "$file" 2>/dev/null || echo "[]")
            fi
            
            if [ "$CURRENT_FINDINGS" != "[]" ]; then
                # 統合
                echo "$CURRENT_FINDINGS" > "$TEMP_DIR/current.json"
                jq -s '.[0] + .[1]' "$MERGED_JSON" "$TEMP_DIR/current.json" > "$TEMP_DIR/merged.json"
                mv "$TEMP_DIR/merged.json" "$MERGED_JSON"
                
                CURRENT_COUNT=$(echo "$CURRENT_FINDINGS" | jq '. | length')
                TOTAL_FINDINGS=$((TOTAL_FINDINGS + CURRENT_COUNT))
                echo "     👆 $CURRENT_COUNT件追加 (累計: $TOTAL_FINDINGS件)"
            else
                echo "     ⚠️  空ファイルまたは読み込みエラー"
            fi
        else
            echo "     ❌ ファイル不正: $file"
        fi
        
        # 進捗表示（10ファイルごと）
        if [ $((PROCESSED_FILES % 10)) -eq 0 ]; then
            echo "     📊 進捗: $PROCESSED_FILES/$TOTAL_FILES ファイル処理済み"
        fi
    done
    
    echo "✅ JSON統合完了: $TOTAL_FINDINGS件"
    
    # CSV変換
    echo ""
    echo "📝 CSV変換開始..."
    
    # CSVヘッダー
    cat > "$FINAL_CSV" << 'EOF'
Id,Title,Severity,ComplianceStatus,WorkflowStatus,CreatedAt,UpdatedAt,AwsAccountId,Region,ResourceType,ResourceId,GeneratorId,Confidence,Description
EOF
    
    # JSON→CSV変換
    jq -r '.[] | [
        .Id // "",
        (.Title // "") | gsub("\n"; " ") | gsub(","; ";"),
        .Severity.Label // "",
        .Compliance.Status // "",
        .Workflow.Status // "",
        .CreatedAt // "",
        .UpdatedAt // "",
        .AwsAccountId // "",
        .Region // "",
        (.Resources[0].Type // "") | tostring,
        (.Resources[0].Id // "") | tostring,
        .GeneratorId // "",
        .Confidence // "",
        (.Description // "") | gsub("\n"; " ") | gsub(","; ";") | gsub("\""; "\"\"")
    ] | @csv' "$MERGED_JSON" >> "$FINAL_CSV"
    
else
    # テキスト形式の場合の簡易統合
    echo "   テキストファイル統合中..."
    cat findings_* > "$TEMP_DIR/merged_text.txt"
    echo "   ⚠️  手動でのCSV変換が必要です"
    cp "$TEMP_DIR/merged_text.txt" "merged_text_findings.txt"
fi

# 結果確認
echo ""
echo "🎉 救済結果:"
echo "======================================"

if [ -f "$FINAL_CSV" ]; then
    CSV_LINES=$(wc -l < "$FINAL_CSV")
    DATA_LINES=$((CSV_LINES - 1))
    FILE_SIZE=$(ls -lh "$FINAL_CSV" | awk '{print $5}')
    
    echo "📁 救済ファイル: $FINAL_CSV"
    echo "📊 データ行数: $DATA_LINES件"
    echo "📏 ファイルサイズ: $FILE_SIZE"
    echo ""
    
    # サンプル表示
    echo "👀 救済データサンプル:"
    head -3 "$FINAL_CSV"
    echo ""
    
    # 統計分析
    echo "📈 救済データ分析:"
    echo "--------------------------------"
    
    if [ $DATA_LINES -gt 0 ]; then
        # 重要度別
        echo "🚨 重要度別:"
        tail -n +2 "$FINAL_CSV" | cut -d',' -f3 | sort | uniq -c | sort -nr | head -5 | while read count level; do
            [ -n "$level" ] && echo "   $level: $count件"
        done
        echo ""
        
        # 対応状況別
        echo "📋 対応状況別:"
        tail -n +2 "$FINAL_CSV" | cut -d',' -f5 | sort | uniq -c | sort -nr | head -5 | while read count status; do
            [ -n "$status" ] && echo "   $status: $count件"
        done
        echo ""
        
        # アカウント別
        echo "🏢 アカウント別:"
        tail -n +2 "$FINAL_CSV" | cut -d',' -f8 | sort | uniq -c | sort -nr | head -3 | while read count account; do
            [ -n "$account" ] && echo "   $account: $count件"
        done
    fi
    
else
    echo "❌ CSV作成失敗"
fi

# クリーンアップ
rm -rf "$TEMP_DIR"

echo ""
echo "🎯 次のステップ:"
echo "======================================"
echo "1. 👆 救済成功なら CloudShell GUIで '$FINAL_CSV' をダウンロード"
echo "2. 📱 Excel/Google Sheetsで開いて分析"
echo "3. 🧹 不要ファイル削除: rm findings_*"
echo ""
echo "💡 ダウンロード方法:"
echo "   CloudShell画面右上の「⋮」→「Download file」→「$FINAL_CSV」"
echo ""
echo "✅ 救済処理完了: $(date)"

# 最終ファイル一覧
echo ""
echo "📂 作成ファイル一覧:"
ls -la "$FINAL_CSV" "$MERGED_JSON" 2>/dev/null || echo "ファイル確認エラー"
